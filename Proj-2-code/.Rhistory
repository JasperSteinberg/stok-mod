x = c(0)
s = c(0)
N = c(0)
U = c(0)
for (j in 1:B){
cState = x[j]
cUstate = tail(U,n=1)
cNstate = tail(N,n=1)
temp = rbinom(1,1,p)
if(cState == 0){ #if there are 0 patients
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
if(temp==1){
N = c(N,1)
}else{
U = c(U,1)
}
x = c(x, 1)
}
else if (cUstate > 0){ #if there are urgent patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
U = c(U, cUstate-1)}
}
else{ #if there are normal patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
N = c(N,cNstate+1)
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
N = c(N,cNstate-1)
}
}
}
A[i] = sum(x)/B
}
t.test(A/lam)
plot(NULL, NULL, xlim = c(0, 5), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5)
k = 0
for(i in N){
k = k+1
lines(s[k:(k+1)], rep(i,2), lwd = 2, col = "blue")
}
t = 0
for(i in U){
t = t+1
lines(s[t:(t+1)], rep(i,2), lwd = 2, col = "red")
}
#data
lam = 5 #patients per hour
mu = 10 #minutes
p = 0.8 #chance of urgent
B = 1.2*10^3
A = vector("numeric", length = 30)
for (i in 1:30){
x = c(0)
s = c(0)
N = c(0)
U = c(0)
for (j in 1:B){
cState = x[j]
cUstate = tail(U,n=1)
cNstate = tail(N,n=1)
temp = rbinom(1,1,p)
if(cState == 0){ #if there are 0 patients
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
if(temp==1){
N = c(N,1)
}else{
U = c(U,1)
}
x = c(x, 1)
}
else if (cUstate > 0){ #if there are urgent patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
U = c(U, cUstate-1)}
}
else{ #if there are normal patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
N = c(N,cNstate+1)
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
N = c(N,cNstate-1)
}
}
}
A[i] = sum(x)/B
}
t.test(A/lam)
plot(NULL, NULL, xlim = c(0, 5), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5)
k = 0
for(i in N){
k = k+1
lines(s[k:(k+1)], rep(i,2), lwd = 2, col = "blue")
}
t = 0
for(i in U){
t = t+1
lines(s[t:(t+1)], rep(i,2), lwd = 2, col = "red")
}
#Oppgitte rater
lam = 5 #Tiden er oppgitt i timer (hours)
mu = 6
#Utgangsting
x = c(0) #x er antall forespørsler i køen
s = c(0) #s er tiden mellom handlinger (events)
B = 1.2*10^3
A = vector("numeric", length = 30)
for(j in 1:30){
x = c(0) #Resetter x og s hvor hver gang vi simulerer
s = c(0)
for(i in 1:B){
cState = x[i]
if(cState == 0){
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
x = c(x, 1)
} else{
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
} else{
x = c(x, cState-1)
}
}
}
A[j] = sum(x)/B #Tar de første 1200 da vi av en eller annen grunn får over 10k entries:(
}
t.test(A/lam)
plot.new()
plot(NULL, NULL, xlim = c(0, 1.2), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5,xaxt='n')
for(i in 1:12){
lines(s[i:(i+1)], rep(x[i],2), lwd = 2)
}
axis(1, at=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2), labels=0:12)
L1 = sum(x)/B #Simulert antall avg. i køen
print(L1)
L2 = lam/(mu-lam) #Analytisk antall --||--
print(L2)
print(abs(L1-L2)) #Forskjell på simulert verdig og analytisk verdi
W1 = L1/lam  #Simulert avg. tid i "systemet"
print(W1)
W2 = L2/lam #Analytisk avg. --||--
print(W2)
print(abs(W1-W2)) #Forskjell på simulert verdig og analytisk verdi
#Oppgitte rater
lam = 5 #Tiden er oppgitt i timer (hours)
mu = 6
#Utgangsting
x = c(0) #x er antall forespørsler i køen
s = c(0) #s er tiden mellom handlinger (events)
B = 1.2*10^3
A = vector("numeric", length = 30)
for(j in 1:30){
x = c(0) #Resetter x og s hvor hver gang vi simulerer
s = c(0)
for(i in 1:B){
cState = x[i]
if(cState == 0){
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
x = c(x, 1)
} else{
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
} else{
x = c(x, cState-1)
}
}
}
A[j] = sum(x)/B #Tar de første 1200 da vi av en eller annen grunn får over 10k entries:(
}
t.test(A/lam)
plot.new()
plot(NULL, NULL, xlim = c(0, 1.2), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5,xaxt='n')
for(i in 1:15){
lines(s[i:(i+1)], rep(x[i],2), lwd = 2)
}
axis(1, at=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2), labels=0:12)
#something wrong with this plot
L1 = sum(x)/B #Simulert antall avg. i køen
print(L1)
L2 = lam/(mu-lam) #Analytisk antall --||--
print(L2)
print(abs(L1-L2)) #Forskjell på simulert verdig og analytisk verdi
W1 = L1/lam  #Simulert avg. tid i "systemet"
print(W1)
W2 = L2/lam #Analytisk avg. --||--
print(W2)
print(abs(W1-W2)) #Forskjell på simulert verdig og analytisk verdi
#Oppgitte rater
lam = 5 #Tiden er oppgitt i timer (hours)
mu = 6
#Utgangsting
x = c(0) #x er antall forespørsler i køen
s = c(0) #s er tiden mellom handlinger (events)
B = 1.2*10^3
A = vector("numeric", length = 30)
for(j in 1:30){
x = c(0) #Resetter x og s hvor hver gang vi simulerer
s = c(0)
for(i in 1:B){
cState = x[i]
if(cState == 0){
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
x = c(x, 1)
} else{
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
} else{
x = c(x, cState-1)
}
}
}
A[j] = sum(x)/B #Tar de første 1200 da vi av en eller annen grunn får over 10k entries:(
}
t.test(A/lam)
plot.new()
plot(NULL, NULL, xlim = c(0, 1.5), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5,xaxt='n')
for(i in 1:15){
lines(s[i:(i+1)], rep(x[i],2), lwd = 2)
}
axis(1, at=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2), labels=0:12)
#something wrong with this plot
L1 = sum(x)/B #Simulert antall avg. i køen
print(L1)
L2 = lam/(mu-lam) #Analytisk antall --||--
print(L2)
print(abs(L1-L2)) #Forskjell på simulert verdig og analytisk verdi
W1 = L1/lam  #Simulert avg. tid i "systemet"
print(W1)
W2 = L2/lam #Analytisk avg. --||--
print(W2)
print(abs(W1-W2)) #Forskjell på simulert verdig og analytisk verdi
#Oppgitte rater
lam = 5 #Tiden er oppgitt i timer (hours)
mu = 6
#Utgangsting
x = c(0) #x er antall forespørsler i køen
s = c(0) #s er tiden mellom handlinger (events)
B = 1.2*10^3
A = vector("numeric", length = 30)
for(j in 1:30){
x = c(0) #Resetter x og s hvor hver gang vi simulerer
s = c(0)
for(i in 1:B){
cState = x[i]
if(cState == 0){
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
x = c(x, 1)
} else{
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
} else{
x = c(x, cState-1)
}
}
}
A[j] = sum(x)/B #Tar de første 1200 da vi av en eller annen grunn får over 10k entries:(
}
t.test(A/lam)
plot.new()
plot(NULL, NULL, xlim = c(0, 1.2), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5,xaxt='n')
for(i in 1:12){
lines(s[i:(i+1)], rep(x[i],2), lwd = 2)
}
axis(1, at=c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2), labels=0:12)
#something wrong with this plot
L1 = sum(x)/B #Simulert antall avg. i køen
print(L1)
L2 = lam/(mu-lam) #Analytisk antall --||--
print(L2)
print(abs(L1-L2)) #Forskjell på simulert verdig og analytisk verdi
W1 = L1/lam  #Simulert avg. tid i "systemet"
print(W1)
W2 = L2/lam #Analytisk avg. --||--
print(W2)
print(abs(W1-W2)) #Forskjell på simulert verdig og analytisk verdi
#data
lam = 5 #patients per hour
mu = 10 #minutes
p = 0.8 #chance of urgent
B = 1.2*10^3
A = vector("numeric", length = 30)
for (i in 1:30){
x = c(0)
s = c(0)
N = c(0)
U = c(0)
for (j in 1:B){
cState = x[j]
cUstate = tail(U,n=1)
cNstate = tail(N,n=1)
temp = rbinom(1,1,p)
if(cState == 0){ #if there are 0 patients
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
if(temp==1){
N = c(N,1)
}else{
U = c(U,1)
}
x = c(x, 1)
}
else if (cUstate > 0){ #if there are urgent patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
U = c(U, cUstate-1)}
}
else{ #if there are normal patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
N = c(N,cNstate+1)
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
N = c(N,cNstate-1)
}
}
}
A[i] = sum(x)/B
}
t.test(A/lam)
plot(NULL, NULL, xlim = c(0, 5), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5)
k = 0
for(i in N){
k = k+1
lines(s[k:(k+1)], rep(i,2), lwd = 2, col = "blue")
}
t = 0
for(i in U){
t = t+1
lines(s[t:(t+1)], rep(i,2), lwd = 2, col = "red")
}
#data
lam = 5 #patients per hour
mu = 10 #minutes
p = 0.8 #chance of urgent
B = 1.2*10^3
A = vector("numeric", length = 30)
for (i in 1:30){
x = c(0)
s = c(0)
N = c(0)
U = c(0)
for (j in 1:B){
cState = x[j]
cUstate = tail(U,n=1)
cNstate = tail(N,n=1)
temp = rbinom(1,1,p)
if(cState == 0){ #if there are 0 patients
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
if(temp==1){
N = c(N,1)
}else{
U = c(U,1)
}
x = c(x, 1)
}
else if (cUstate > 0){ #if there are urgent patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
U = c(U, cUstate-1)}
}
else{ #if there are normal patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
N = c(N,cNstate+1)
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
N = c(N,cNstate-1)
}
}
}
A[i] = sum(U)/B
}
t.test(A/lam)
plot(NULL, NULL, xlim = c(0, 5), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5)
k = 0
for(i in N){
k = k+1
lines(s[k:(k+1)], rep(i,2), lwd = 2, col = "blue")
}
t = 0
for(i in U){
t = t+1
lines(s[t:(t+1)], rep(i,2), lwd = 2, col = "red")
}
#data
lam = 5 #patients per hour
mu = 10 #minutes
p = 0.8 #chance of urgent
B = 1.2*10^3
A = vector("numeric", length = 30)
for (i in 1:30){
x = c(0)
s = c(0)
N = c(0)
U = c(0)
for (j in 1:B){
cState = x[j]
cUstate = tail(U,n=1)
cNstate = tail(N,n=1)
temp = rbinom(1,1,p)
if(cState == 0){ #if there are 0 patients
s = c(s, tail(s,1)+rexp(n = 1, rate = lam))
if(temp==1){
N = c(N,1)
}else{
U = c(U,1)
}
x = c(x, 1)
}
else if (cUstate > 0){ #if there are urgent patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
U = c(U, cUstate-1)}
}
else{ #if there are normal patients waiting
s = c(s, tail(s,1) + rexp(n = 1, rate = lam+mu))
if(runif(1) < lam/(lam+mu)){
x = c(x, cState+1)
if(temp==1){
N = c(N,cNstate+1)
}else{
N = c(N,cNstate+1)
U = c(U,cUstate+1)
}
} else{
x = c(x, cState-1)
N = c(N,cNstate-1)
}
}
}
A[i] = sum(N)/B
}
t.test(A/lam)
plot(NULL, NULL, xlim = c(0, 5), ylim = c(0, 10), xlab = "Time (h)", ylab = "Number of requests in system", cex.axis = 1.5, cex.lab = 1.5)
k = 0
for(i in N){
k = k+1
lines(s[k:(k+1)], rep(i,2), lwd = 2, col = "blue")
}
t = 0
for(i in U){
t = t+1
lines(s[t:(t+1)], rep(i,2), lwd = 2, col = "red")
}
